[{"D:\\work\\scalable\\src\\index.tsx":"1","D:\\work\\scalable\\src\\app.tsx":"2","D:\\work\\scalable\\src\\pages\\exchange.tsx":"3","D:\\work\\scalable\\src\\features\\exchange\\components\\table\\index.ts":"4","D:\\work\\scalable\\src\\features\\exchange\\components\\table\\table.tsx":"5","D:\\work\\scalable\\src\\features\\exchange\\index.ts":"6","D:\\work\\scalable\\src\\features\\exchange\\components\\table-header\\index.ts":"7","D:\\work\\scalable\\src\\features\\exchange\\components\\table-row\\index.tsx":"8","D:\\work\\scalable\\src\\features\\exchange\\components\\table-header\\table-header.tsx":"9","D:\\work\\scalable\\src\\features\\exchange\\components\\table-row\\table-row.tsx":"10","D:\\work\\scalable\\src\\models\\index.ts":"11","D:\\work\\scalable\\src\\features\\exchange\\components\\table-cell\\index.ts":"12","D:\\work\\scalable\\src\\models\\symbol.ts":"13","D:\\work\\scalable\\src\\features\\exchange\\components\\table-cell\\table-cell.tsx":"14","D:\\work\\scalable\\src\\features\\exchange\\store\\index.ts":"15","D:\\work\\scalable\\src\\features\\exchange\\components\\theme-switch\\theme-switch.tsx":"16","D:\\work\\scalable\\src\\features\\exchange\\components\\theme-switch\\index.ts":"17"},{"size":447,"mtime":1610558659094,"results":"18","hashOfConfig":"19"},{"size":193,"mtime":1610396781925,"results":"20","hashOfConfig":"19"},{"size":5322,"mtime":1610667739030,"results":"21","hashOfConfig":"19"},{"size":26,"mtime":1610477599042,"results":"22","hashOfConfig":"19"},{"size":1065,"mtime":1610669112144,"results":"23","hashOfConfig":"19"},{"size":74,"mtime":1610479500104,"results":"24","hashOfConfig":"19"},{"size":33,"mtime":1610479230356,"results":"25","hashOfConfig":"19"},{"size":30,"mtime":1610479088665,"results":"26","hashOfConfig":"19"},{"size":1377,"mtime":1610570930726,"results":"27","hashOfConfig":"19"},{"size":613,"mtime":1610661135484,"results":"28","hashOfConfig":"19"},{"size":27,"mtime":1610284296535,"results":"29","hashOfConfig":"19"},{"size":31,"mtime":1610496322909,"results":"30","hashOfConfig":"19"},{"size":1388,"mtime":1610571693117,"results":"31","hashOfConfig":"19"},{"size":863,"mtime":1610661844794,"results":"32","hashOfConfig":"19"},{"size":638,"mtime":1610570309419,"results":"33","hashOfConfig":"19"},{"size":881,"mtime":1610667794444,"results":"34","hashOfConfig":"19"},{"size":33,"mtime":1610667724875,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"lpvidv",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"D:\\work\\scalable\\src\\index.tsx",[],["74","75"],"D:\\work\\scalable\\src\\app.tsx",[],"D:\\work\\scalable\\src\\pages\\exchange.tsx",["76","77","78","79","80"],"import React, { MouseEventHandler, useCallback, useEffect, useReducer, useRef, useState } from \"react\";\r\n\r\nimport { Symbol, SymbolSort, SymbolTicker, SymbolTickerResponse } from \"../models\";\r\nimport { Table } from \"src/features/exchange/components/table\";\r\nimport { sortReducer } from \"src/features/exchange/store\";\r\nimport { TableHeader } from \"src/features/exchange/components/table-header\";\r\nimport { EXCHANGE } from \"src/features/exchange\";\r\nimport { ThemeSwitch } from \"src/features/exchange/components/theme-switch\";\r\n\r\nconst API = \"wss://api.exchange.bitcoin.com/api/2/ws\";\r\nconst DISPLAY_COUNT = 50;\r\n\r\nexport const Exchange = () => {\r\n    const tempData = useRef<Map<string, SymbolTicker>>(new Map());\r\n    const [symbols, setSymbols] = useState<Map<string, Symbol>>();\r\n    const [socket, setSocket] = useState<WebSocket>();\r\n    const [displayCount, setDisplayCount] = useState(0);\r\n    const [data, setData] = useState<SymbolTicker[]>([]);\r\n    const [sort, setSort] = useReducer(sortReducer, {\r\n        direction: \"DESC\",\r\n        key: \"last\",\r\n    });\r\n\r\n    const initData = useCallback(\r\n        (tempData: Map<string, SymbolTicker>) => {\r\n            const data: SymbolTicker[] = [];\r\n            tempData.forEach((symbolTicker, key) => {\r\n                const symbol = symbols?.get(key);\r\n                if (symbol) {\r\n                    const { baseCurrency, quoteCurrency } = symbol;\r\n                    data.push({ ...symbolTicker, name: `${baseCurrency} / ${quoteCurrency}` });\r\n                }\r\n            });\r\n            tempData.clear();\r\n            data.sort((a, b) => b.last - a.last);\r\n            setData([...data]);\r\n        },\r\n        [symbols, setData]\r\n    );\r\n\r\n    const updateListner = useCallback(\r\n        (e) => {\r\n            const res: SymbolTickerResponse = JSON.parse(e.data);\r\n            if (res.method === \"ticker\") {\r\n                const { params: symbolTicker } = res;\r\n                setData((prev) => {\r\n                    const data = [...prev];\r\n                    const foundIndex = prev.findIndex(({ symbol }) => symbol === symbolTicker.symbol);\r\n                    data[foundIndex] = { ...prev[foundIndex], ...symbolTicker };\r\n                    return data;\r\n                });\r\n            }\r\n        },\r\n        [setData]\r\n    );\r\n\r\n    const initListner = useCallback(\r\n        (e) => {\r\n            const data = JSON.parse(e.data);\r\n            const eventType = data.id || data.method;\r\n            switch (eventType) {\r\n                case \"symbols\":\r\n                    const { result } = data;\r\n                    const symbolsList = result.map((symbol: Symbol) => [symbol.id, symbol]);\r\n                    setSymbols(new Map(symbolsList));\r\n                    break;\r\n                case \"ticker\":\r\n                    if (!symbols) return;\r\n\r\n                    const { params: symbolTicker } = data;\r\n                    tempData.current.set(symbolTicker.symbol, symbolTicker);\r\n                    if (symbols?.size === tempData.current.size) {\r\n                        initData(tempData.current);\r\n                        setSocket((socket) => {\r\n                            socket!.onmessage = updateListner;\r\n                            return socket;\r\n                        });\r\n                    }\r\n                    break;\r\n            }\r\n        },\r\n        [symbols, setSymbols, setSocket, initData]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const socket = new WebSocket(API);\r\n        setSocket(socket);\r\n        return () => socket.close();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (socket && !socket.onmessage) {\r\n            socket.onopen = function (e) {\r\n                console.log(\"WebSocket:connnected\");\r\n                socket.onmessage = initListner;\r\n                socket.send(\r\n                    JSON.stringify({\r\n                        method: \"getSymbols\",\r\n                        params: {},\r\n                        id: \"symbols\",\r\n                    })\r\n                );\r\n            };\r\n        }\r\n    }, [socket]);\r\n\r\n    useEffect(() => {\r\n        if (!socket || !symbols) return;\r\n\r\n        socket.onmessage = initListner;\r\n        symbols?.forEach((_, symbol) => {\r\n            socket.send(\r\n                JSON.stringify({\r\n                    method: \"subscribeTicker\",\r\n                    params: {\r\n                        symbol,\r\n                    },\r\n                })\r\n            );\r\n        });\r\n    }, [symbols]);\r\n\r\n    const onClickDisplayCount: MouseEventHandler = useCallback(\r\n        (e) => {\r\n            e.preventDefault();\r\n            setDisplayCount((prev) => (!prev ? DISPLAY_COUNT : 0));\r\n        },\r\n        [displayCount, setDisplayCount]\r\n    );\r\n\r\n    const baseClass = EXCHANGE;\r\n    return (\r\n        <div className=\"page\">\r\n            <ThemeSwitch />\r\n            <h1 className=\"page__title\">Exchange Quotes</h1>\r\n            <button onClick={onClickDisplayCount} className={`${baseClass}__display-count`}>\r\n                {displayCount ? `Show all` : `Show top 50`}\r\n            </button>\r\n            <TableHeader sort={sort} setSort={setSort} />\r\n            <div>\r\n                {data.length > 0 && <Table data={data} sort={sort} disolayCount={displayCount} setSort={setSort} />}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","D:\\work\\scalable\\src\\features\\exchange\\components\\table\\index.ts",[],"D:\\work\\scalable\\src\\features\\exchange\\components\\table\\table.tsx",[],"D:\\work\\scalable\\src\\features\\exchange\\index.ts",[],"D:\\work\\scalable\\src\\features\\exchange\\components\\table-header\\index.ts",[],"D:\\work\\scalable\\src\\features\\exchange\\components\\table-row\\index.tsx",[],"D:\\work\\scalable\\src\\features\\exchange\\components\\table-header\\table-header.tsx",[],"D:\\work\\scalable\\src\\features\\exchange\\components\\table-row\\table-row.tsx",["81"],"import React, { memo, useRef } from \"react\";\r\n\r\nimport { SymbolModels, SymbolTicker } from \"src/models\";\r\nimport { EXCHANGE } from \"../..\";\r\nimport { TableCell } from \"../table-cell\";\r\n\r\ntype TableRowProps = {\r\n    data: SymbolTicker;\r\n    prev?: SymbolTicker;\r\n};\r\n\r\nexport const TableRow = memo(({ data }: TableRowProps) => {\r\n    const baseClass = EXCHANGE;\r\n\r\n    return (\r\n        <div className={`${baseClass}__row`}>\r\n            {SymbolModels.map(({ key, sortable }) => {\r\n                return <TableCell key={key} data={data[key]} isNumber={sortable} />;\r\n            })}\r\n        </div>\r\n    );\r\n});\r\n","D:\\work\\scalable\\src\\models\\index.ts",[],"D:\\work\\scalable\\src\\features\\exchange\\components\\table-cell\\index.ts",[],"D:\\work\\scalable\\src\\models\\symbol.ts",[],"D:\\work\\scalable\\src\\features\\exchange\\components\\table-cell\\table-cell.tsx",[],"D:\\work\\scalable\\src\\features\\exchange\\store\\index.ts",["82"],"import { SymbolSort, SymbolTickerKey } from \"src/models\";\r\n\r\nexport type SortReducerAction = {\r\n    type: \"setSort\";\r\n    payload: SymbolTickerKey;\r\n};\r\n\r\nexport const sortReducer = (state: SymbolSort, action: SortReducerAction): SymbolSort => {\r\n    switch (action.type) {\r\n        case \"setSort\":\r\n            if (state.key === action.payload) {\r\n                return { key: action.payload, direction: state.direction === \"ASC\" ? \"DESC\" : \"ASC\" };\r\n            } else {\r\n                return { key: action.payload, direction: \"ASC\" };\r\n            }\r\n            break;\r\n        default:\r\n            throw new Error();\r\n    }\r\n};\r\n","D:\\work\\scalable\\src\\features\\exchange\\components\\theme-switch\\theme-switch.tsx",[],"D:\\work\\scalable\\src\\features\\exchange\\components\\theme-switch\\index.ts",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":3,"column":18,"nodeType":"89","messageId":"90","endLine":3,"endColumn":28},{"ruleId":"91","severity":1,"message":"92","line":82,"column":9,"nodeType":"93","endLine":82,"endColumn":51,"suggestions":"94"},{"ruleId":"91","severity":1,"message":"95","line":105,"column":8,"nodeType":"93","endLine":105,"endColumn":16,"suggestions":"96"},{"ruleId":"91","severity":1,"message":"97","line":121,"column":8,"nodeType":"93","endLine":121,"endColumn":17,"suggestions":"98"},{"ruleId":"91","severity":1,"message":"99","line":128,"column":9,"nodeType":"93","endLine":128,"endColumn":40,"suggestions":"100"},{"ruleId":"87","severity":1,"message":"101","line":1,"column":23,"nodeType":"89","messageId":"90","endLine":1,"endColumn":29},{"ruleId":"102","severity":1,"message":"103","line":16,"column":13,"nodeType":"104","messageId":"105","endLine":16,"endColumn":19},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"@typescript-eslint/no-unused-vars","'SymbolSort' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'updateListner'. Either include it or remove the dependency array.","ArrayExpression",["108"],"React Hook useEffect has a missing dependency: 'initListner'. Either include it or remove the dependency array.",["109"],"React Hook useEffect has missing dependencies: 'initListner' and 'socket'. Either include them or remove the dependency array.",["110"],"React Hook useCallback has an unnecessary dependency: 'displayCount'. Either exclude it or remove the dependency array.",["111"],"'useRef' is defined but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},"Update the dependencies array to be: [symbols, initData, updateListner]",{"range":"120","text":"121"},"Update the dependencies array to be: [initListner, socket]",{"range":"122","text":"123"},"Update the dependencies array to be: [initListner, socket, symbols]",{"range":"124","text":"125"},"Update the dependencies array to be: [setDisplayCount]",{"range":"126","text":"127"},[3364,3406],"[symbols, initData, updateListner]",[4050,4058],"[initListner, socket]",[4467,4476],"[initListner, socket, symbols]",[4687,4718],"[setDisplayCount]"]